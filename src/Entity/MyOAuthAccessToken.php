<?php

namespace App\Entity;

use App\Repository\MyOAuthAccessTokenRepository;
use Doctrine\ORM\Mapping as ORM;
use DateTime;

/**
 * Entity to store data about the access tokens that are generated by my OAuth Server implementation.
 * @ORM\Entity(repositoryClass=MyOAuthAccessTokenRepository::class)
 */
class MyOAuthAccessToken
{
    /**
     * ID of given token.
     * @ORM\Id
     * @ORM\GeneratedValue
     * @ORM\Column(type="integer")
     */
    private $id;

    /**
     * Token that is given by generateToken function.
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    private $identifier;

    /**
     * Client identifier (usually client public key).
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    private $client_id;

    /**
     * Date when token was created. ('Y-M-D H-M-S')
     * @ORM\Column(type="datetime", nullable=true)
     */
    private $make_date;

    /**
     * User email for whom the token was created
     * @ORM\Column(type="string", nullable=true)
     */
    private $user_id;

    /**
     * The scope of access to the specifying what actions the user can perform with this token.
     * @ORM\Column(type="string")
     */
    private $scopes = "";

    /**
     * Variable which shows if token is up-to-date.
     * ATTENTION: This is useless variable because token out of date is checking with make_date variable.
     * @ORM\Column(type="boolean")
     */
    private $is_active;

    /**
     * Return token ID.
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * Return token string (20 char string)
     * @return string|null
     */
    public function getIdentifier(): ?string
    {
        return $this->identifier;
    }

    /**
     * Give access to change token.
     * ATTENTION: It's not good idea at any other times than to generate a new token.
     * @param string|null $identifier
     * @return $this
     */
    public function setIdentifier(?string $identifier): self
    {
        $this->identifier = $identifier;

        return $this;
    }

    /**
     * Return id of the client whose token it is.
     * @return string|null
     */
    public function getClientId(): ?string
    {
        return $this->client_id;
    }

    /**
     * Give access to change client id.
     * ATTENTION: It's not good idea at any other times than to generate a new token.
     * @param string|null $client_id
     * @return $this
     */
    public function setClientId(?string $client_id): self
    {
        $this->client_id = $client_id;

        return $this;
    }

    /**
     * Return the date when the token was generated. ('Y-M-D H-M-S')
     * @return \DateTimeInterface|null
     */
    public function getMakeDate(): ?\DateTimeInterface
    {
        return $this->make_date;
    }

    /**
     * Give access to change date of generate the token. ('Y-M-D H-M-S')
     * @return $this
     * @throws \Exception
     */
    public function setMakeDate(): self
    {
        $date = new DateTime(date('Y-m-d H:i:s'));
        $this->make_date = $date;
        return $this;
    }

    /**
     * Return id of the user whose token it is.
     * @return string|null
     */
    public function getUserId(): ?string
    {
        return $this->user_id;
    }

    /**
     * Give access to change user email.
     * ATTENTION: It's not good idea at any other times than to generate a new token.
     * @param string|null $user_id
     * @return $this
     */
    public function setUserId(?string $user_id): self
    {
        $this->user_id = $user_id;

        return $this;
    }

    /**
     * Return string of scopes. All scopes are separated by space.
     * @return string
     */
    public function getScopes(): string
    {
        return $this->scopes;
    }

    /**
     * Give access to change scopes. Scopes are separated by space.
     * The scopes user are:
     * - add
     * - read
     * ATTENTION: Remember about space between scopes.
     * NOTICE: All scopes will be made later.
     * @param string $scopes
     */
    public function setScopes(string $scopes): void
    {
        $this->scopes = $scopes;
    }

    /**
     * Return token active status.
     * @return bool|null
     */
    public function getIsActive(): ?bool
    {
        return $this->is_active;
    }

    /**
     * Give access to change token status.
     * @param bool $is_active
     * @return $this
     */
    public function setIsActive(bool $is_active): self
    {
        $this->is_active = $is_active;

        return $this;
    }
}
